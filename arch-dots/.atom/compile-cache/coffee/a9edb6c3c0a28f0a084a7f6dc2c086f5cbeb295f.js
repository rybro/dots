(function() {
  var ChildProcess, Path, ScriptRunnerProcess, Shellwords;

  ChildProcess = require('child_process');

  Path = require('path');

  Shellwords = require('shellwords');

  module.exports = ScriptRunnerProcess = (function() {
    ScriptRunnerProcess.run = function(view, cmd, env, editor) {
      var scriptRunnerProcess;
      scriptRunnerProcess = new ScriptRunnerProcess(view);
      scriptRunnerProcess.execute(cmd, env, editor);
      return scriptRunnerProcess;
    };

    function ScriptRunnerProcess(view) {
      this.view = view;
      this.child = null;
    }

    ScriptRunnerProcess.prototype.detach = function() {
      return this.view = null;
    };

    ScriptRunnerProcess.prototype.stop = function(signal) {
      if (signal == null) {
        signal = 'SIGINT';
      }
      if (this.child) {
        console.log("Sending", signal, "to child", this.child, "pid", this.child.pid);
        process.kill(-this.child.pid, signal);
        if (this.view) {
          return this.view.append('<Sending ' + signal + '>', 'stdin');
        }
      }
    };

    ScriptRunnerProcess.prototype.execute = function(cmd, env, editor) {
      var appendBuffer, args, cwd, startTime;
      cwd = atom.project.path;
      args = Shellwords.split(cmd);
      if (editor.getPath()) {
        editor.save();
        cwd = Path.dirname(editor.getPath());
      }
      if (editor.getPath() && !editor.buffer.isModified()) {
        args.push(editor.getPath());
        appendBuffer = false;
      } else {
        appendBuffer = true;
      }
      cmd = args.join(' ');
      args.unshift(__dirname + "/script-wrapper.py");
      this.child = ChildProcess.spawn(args[0], args.slice(1), {
        cwd: cwd,
        env: env,
        detached: true
      });
      this.view.header('Running: ' + cmd + ' (pgid ' + this.child.pid + ')');
      this.child.stderr.on('data', (function(_this) {
        return function(data) {
          if (_this.view != null) {
            _this.view.append(data, 'stderr');
            return _this.view.scrollToBottom();
          }
        };
      })(this));
      this.child.stdout.on('data', (function(_this) {
        return function(data) {
          if (_this.view != null) {
            _this.view.append(data, 'stdout');
            return _this.view.scrollToBottom();
          }
        };
      })(this));
      this.child.on('close', (function(_this) {
        return function(code, signal) {
          var duration;
          _this.child = null;
          if (_this.view) {
            duration = ' after ' + ((new Date - startTime) / 1000) + ' seconds';
            if (signal) {
              return _this.view.footer('Exited with signal ' + signal + duration);
            } else {
              code || (code = 0);
              return _this.view.footer('Exited with status ' + code + duration);
            }
          }
        };
      })(this));
      startTime = new Date;
      if (appendBuffer) {
        this.child.stdin.write(editor.getText());
      }
      return this.child.stdin.end();
    };

    return ScriptRunnerProcess;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvcnlhbi8uYXRvbS9wYWNrYWdlcy9zY3JpcHQtcnVubmVyL2xpYi9zY3JpcHQtcnVubmVyLXByb2Nlc3MuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLG1EQUFBOztBQUFBLEVBQUEsWUFBQSxHQUFlLE9BQUEsQ0FBUSxlQUFSLENBQWYsQ0FBQTs7QUFBQSxFQUNBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQURQLENBQUE7O0FBQUEsRUFFQSxVQUFBLEdBQWEsT0FBQSxDQUFRLFlBQVIsQ0FGYixDQUFBOztBQUFBLEVBSUEsTUFBTSxDQUFDLE9BQVAsR0FDTTtBQUNKLElBQUEsbUJBQUMsQ0FBQSxHQUFELEdBQU0sU0FBQyxJQUFELEVBQU8sR0FBUCxFQUFZLEdBQVosRUFBaUIsTUFBakIsR0FBQTtBQUNKLFVBQUEsbUJBQUE7QUFBQSxNQUFBLG1CQUFBLEdBQTBCLElBQUEsbUJBQUEsQ0FBb0IsSUFBcEIsQ0FBMUIsQ0FBQTtBQUFBLE1BRUEsbUJBQW1CLENBQUMsT0FBcEIsQ0FBNEIsR0FBNUIsRUFBaUMsR0FBakMsRUFBc0MsTUFBdEMsQ0FGQSxDQUFBO0FBSUEsYUFBTyxtQkFBUCxDQUxJO0lBQUEsQ0FBTixDQUFBOztBQU9hLElBQUEsNkJBQUMsSUFBRCxHQUFBO0FBQ1gsTUFBQSxJQUFDLENBQUEsSUFBRCxHQUFRLElBQVIsQ0FBQTtBQUFBLE1BQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQURULENBRFc7SUFBQSxDQVBiOztBQUFBLGtDQVdBLE1BQUEsR0FBUSxTQUFBLEdBQUE7YUFDTixJQUFDLENBQUEsSUFBRCxHQUFRLEtBREY7SUFBQSxDQVhSLENBQUE7O0FBQUEsa0NBY0EsSUFBQSxHQUFNLFNBQUMsTUFBRCxHQUFBOztRQUFDLFNBQVM7T0FDZDtBQUFBLE1BQUEsSUFBRyxJQUFDLENBQUEsS0FBSjtBQUNFLFFBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxTQUFaLEVBQXVCLE1BQXZCLEVBQStCLFVBQS9CLEVBQTJDLElBQUMsQ0FBQSxLQUE1QyxFQUFtRCxLQUFuRCxFQUEwRCxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQWpFLENBQUEsQ0FBQTtBQUFBLFFBQ0EsT0FBTyxDQUFDLElBQVIsQ0FBYSxDQUFBLElBQUUsQ0FBQSxLQUFLLENBQUMsR0FBckIsRUFBMEIsTUFBMUIsQ0FEQSxDQUFBO0FBRUEsUUFBQSxJQUFHLElBQUMsQ0FBQSxJQUFKO2lCQUNFLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBTixDQUFhLFdBQUEsR0FBYyxNQUFkLEdBQXVCLEdBQXBDLEVBQXlDLE9BQXpDLEVBREY7U0FIRjtPQURJO0lBQUEsQ0FkTixDQUFBOztBQUFBLGtDQXFCQSxPQUFBLEdBQVMsU0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLE1BQVgsR0FBQTtBQUNQLFVBQUEsa0NBQUE7QUFBQSxNQUFBLEdBQUEsR0FBTSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQW5CLENBQUE7QUFBQSxNQUdBLElBQUEsR0FBTyxVQUFVLENBQUMsS0FBWCxDQUFpQixHQUFqQixDQUhQLENBQUE7QUFNQSxNQUFBLElBQUcsTUFBTSxDQUFDLE9BQVAsQ0FBQSxDQUFIO0FBQ0UsUUFBQSxNQUFNLENBQUMsSUFBUCxDQUFBLENBQUEsQ0FBQTtBQUFBLFFBQ0EsR0FBQSxHQUFNLElBQUksQ0FBQyxPQUFMLENBQWEsTUFBTSxDQUFDLE9BQVAsQ0FBQSxDQUFiLENBRE4sQ0FERjtPQU5BO0FBV0EsTUFBQSxJQUFHLE1BQU0sQ0FBQyxPQUFQLENBQUEsQ0FBQSxJQUFxQixDQUFBLE1BQU8sQ0FBQyxNQUFNLENBQUMsVUFBZCxDQUFBLENBQXpCO0FBQ0UsUUFBQSxJQUFJLENBQUMsSUFBTCxDQUFVLE1BQU0sQ0FBQyxPQUFQLENBQUEsQ0FBVixDQUFBLENBQUE7QUFBQSxRQUNBLFlBQUEsR0FBZSxLQURmLENBREY7T0FBQSxNQUFBO0FBSUUsUUFBQSxZQUFBLEdBQWUsSUFBZixDQUpGO09BWEE7QUFBQSxNQWtCQSxHQUFBLEdBQU0sSUFBSSxDQUFDLElBQUwsQ0FBVSxHQUFWLENBbEJOLENBQUE7QUFBQSxNQXFCQSxJQUFJLENBQUMsT0FBTCxDQUFhLFNBQUEsR0FBWSxvQkFBekIsQ0FyQkEsQ0FBQTtBQUFBLE1Bd0JBLElBQUMsQ0FBQSxLQUFELEdBQVMsWUFBWSxDQUFDLEtBQWIsQ0FBbUIsSUFBSyxDQUFBLENBQUEsQ0FBeEIsRUFBNEIsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLENBQTVCLEVBQTJDO0FBQUEsUUFBQSxHQUFBLEVBQUssR0FBTDtBQUFBLFFBQVUsR0FBQSxFQUFLLEdBQWY7QUFBQSxRQUFvQixRQUFBLEVBQVUsSUFBOUI7T0FBM0MsQ0F4QlQsQ0FBQTtBQUFBLE1BMkJBLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBTixDQUFhLFdBQUEsR0FBYyxHQUFkLEdBQW9CLFNBQXBCLEdBQWdDLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBdkMsR0FBNkMsR0FBMUQsQ0EzQkEsQ0FBQTtBQUFBLE1BOEJBLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQWQsQ0FBaUIsTUFBakIsRUFBeUIsQ0FBQSxTQUFBLEtBQUEsR0FBQTtlQUFBLFNBQUMsSUFBRCxHQUFBO0FBQ3ZCLFVBQUEsSUFBRyxrQkFBSDtBQUNFLFlBQUEsS0FBQyxDQUFBLElBQUksQ0FBQyxNQUFOLENBQWEsSUFBYixFQUFtQixRQUFuQixDQUFBLENBQUE7bUJBQ0EsS0FBQyxDQUFBLElBQUksQ0FBQyxjQUFOLENBQUEsRUFGRjtXQUR1QjtRQUFBLEVBQUE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXpCLENBOUJBLENBQUE7QUFBQSxNQW1DQSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFkLENBQWlCLE1BQWpCLEVBQXlCLENBQUEsU0FBQSxLQUFBLEdBQUE7ZUFBQSxTQUFDLElBQUQsR0FBQTtBQUN2QixVQUFBLElBQUcsa0JBQUg7QUFDRSxZQUFBLEtBQUMsQ0FBQSxJQUFJLENBQUMsTUFBTixDQUFhLElBQWIsRUFBbUIsUUFBbkIsQ0FBQSxDQUFBO21CQUNBLEtBQUMsQ0FBQSxJQUFJLENBQUMsY0FBTixDQUFBLEVBRkY7V0FEdUI7UUFBQSxFQUFBO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF6QixDQW5DQSxDQUFBO0FBQUEsTUF3Q0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxFQUFQLENBQVUsT0FBVixFQUFtQixDQUFBLFNBQUEsS0FBQSxHQUFBO2VBQUEsU0FBQyxJQUFELEVBQU8sTUFBUCxHQUFBO0FBRWpCLGNBQUEsUUFBQTtBQUFBLFVBQUEsS0FBQyxDQUFBLEtBQUQsR0FBUyxJQUFULENBQUE7QUFDQSxVQUFBLElBQUcsS0FBQyxDQUFBLElBQUo7QUFDRSxZQUFBLFFBQUEsR0FBVyxTQUFBLEdBQVksQ0FBQyxDQUFDLEdBQUEsQ0FBQSxJQUFBLEdBQVcsU0FBWixDQUFBLEdBQXlCLElBQTFCLENBQVosR0FBOEMsVUFBekQsQ0FBQTtBQUNBLFlBQUEsSUFBRyxNQUFIO3FCQUNFLEtBQUMsQ0FBQSxJQUFJLENBQUMsTUFBTixDQUFhLHFCQUFBLEdBQXdCLE1BQXhCLEdBQWlDLFFBQTlDLEVBREY7YUFBQSxNQUFBO0FBSUUsY0FBQSxTQUFBLE9BQVMsRUFBVCxDQUFBO3FCQUNBLEtBQUMsQ0FBQSxJQUFJLENBQUMsTUFBTixDQUFhLHFCQUFBLEdBQXdCLElBQXhCLEdBQStCLFFBQTVDLEVBTEY7YUFGRjtXQUhpQjtRQUFBLEVBQUE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQW5CLENBeENBLENBQUE7QUFBQSxNQW9EQSxTQUFBLEdBQVksR0FBQSxDQUFBLElBcERaLENBQUE7QUF1REEsTUFBQSxJQUFHLFlBQUg7QUFDRSxRQUFBLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQWIsQ0FBbUIsTUFBTSxDQUFDLE9BQVAsQ0FBQSxDQUFuQixDQUFBLENBREY7T0F2REE7YUEwREEsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBYixDQUFBLEVBM0RPO0lBQUEsQ0FyQlQsQ0FBQTs7K0JBQUE7O01BTkYsQ0FBQTtBQUFBIgp9

//# sourceURL=/home/ryan/.atom/packages/script-runner/lib/script-runner-process.coffee
